#!/bin/bash

# LXC Network Configuration Helper Script
# Advanced network configuration for LXC containers

set -euo pipefail

# Configuration
LXC_ID="${1:-101}"
NETWORK_MODE="${2:-dhcp}"  # dhcp, static, or bridge
STATIC_IP="${3:-}"
GATEWAY="${4:-}"
DNS_SERVERS="${5:-8.8.8.8,1.1.1.1}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Function to execute commands inside LXC
lxc_exec() {
    local command="$1"
    local description="${2:-Executing LXC command}"

    log_info "$description"
    pct exec "$LXC_ID" -- bash -c "$command"
}

# Detect container OS
detect_container_os() {
    log_info "Detecting container operating system..."

    local os_info
    os_info=$(lxc_exec "cat /etc/os-release" "Getting OS information" 2>/dev/null || echo "Unknown")

    if echo "$os_info" | grep -qi "ubuntu\|debian"; then
        echo "debian"
    elif echo "$os_info" | grep -qi "centos\|rhel\|rocky\|alma"; then
        echo "rhel"
    elif echo "$os_info" | grep -qi "alpine"; then
        echo "alpine"
    else
        echo "unknown"
    fi
}

# Configure network for Debian/Ubuntu systems
configure_debian_network() {
    local mode="$1"
    local ip="$2"
    local gateway="$3"

    log_info "Configuring network for Debian/Ubuntu system..."

    if [[ "$mode" == "dhcp" ]]; then
        cat << EOF | lxc_exec "cat > /etc/network/interfaces" "Writing network configuration"
# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet dhcp
EOF
    elif [[ "$mode" == "static" && -n "$ip" && -n "$gateway" ]]; then
        local subnet_mask="24"  # Default /24
        cat << EOF | lxc_exec "cat > /etc/network/interfaces" "Writing static network configuration"
# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet static
    address $ip/$subnet_mask
    gateway $gateway
EOF
    fi

    # Configure DNS
    local dns_list
    IFS=',' read -ra dns_list <<< "$DNS_SERVERS"

    lxc_exec "echo '# Generated by lxc-network-config' > /etc/resolv.conf" "Clearing DNS configuration"
    for dns in "${dns_list[@]}"; do
        lxc_exec "echo 'nameserver $dns' >> /etc/resolv.conf" "Adding DNS server $dns"
    done

    # Restart networking
    lxc_exec "systemctl restart networking" "Restarting network service"
}

# Configure network for CentOS/RHEL systems
configure_rhel_network() {
    local mode="$1"
    local ip="$2"
    local gateway="$3"

    log_info "Configuring network for CentOS/RHEL system..."

    if [[ "$mode" == "dhcp" ]]; then
        cat << EOF | lxc_exec "cat > /etc/sysconfig/network-scripts/ifcfg-eth0" "Writing network configuration"
DEVICE=eth0
BOOTPROTO=dhcp
ONBOOT=yes
TYPE=Ethernet
EOF
    elif [[ "$mode" == "static" && -n "$ip" && -n "$gateway" ]]; then
        cat << EOF | lxc_exec "cat > /etc/sysconfig/network-scripts/ifcfg-eth0" "Writing static network configuration"
DEVICE=eth0
BOOTPROTO=static
ONBOOT=yes
TYPE=Ethernet
IPADDR=$ip
NETMASK=255.255.255.0
GATEWAY=$gateway
EOF
    fi

    # Configure DNS
    local dns_list
    IFS=',' read -ra dns_list <<< "$DNS_SERVERS"

    lxc_exec "echo '# Generated by lxc-network-config' > /etc/resolv.conf" "Clearing DNS configuration"
    for dns in "${dns_list[@]}"; do
        lxc_exec "echo 'nameserver $dns' >> /etc/resolv.conf" "Adding DNS server $dns"
    done

    # Restart networking
    lxc_exec "systemctl restart network" "Restarting network service"
}

# Configure network for Alpine systems
configure_alpine_network() {
    local mode="$1"
    local ip="$2"
    local gateway="$3"

    log_info "Configuring network for Alpine system..."

    if [[ "$mode" == "dhcp" ]]; then
        cat << EOF | lxc_exec "cat > /etc/network/interfaces" "Writing network configuration"
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet dhcp
EOF
    elif [[ "$mode" == "static" && -n "$ip" && -n "$gateway" ]]; then
        cat << EOF | lxc_exec "cat > /etc/network/interfaces" "Writing static network configuration"
auto lo
iface lo inet loopback

auto eth0
iface eth0 inet static
    address $ip/24
    gateway $gateway
EOF
    fi

    # Configure DNS
    local dns_list
    IFS=',' read -ra dns_list <<< "$DNS_SERVERS"

    lxc_exec "echo '# Generated by lxc-network-config' > /etc/resolv.conf" "Clearing DNS configuration"
    for dns in "${dns_list[@]}"; do
        lxc_exec "echo 'nameserver $dns' >> /etc/resolv.conf" "Adding DNS server $dns"
    done

    # Restart networking
    lxc_exec "rc-service networking restart" "Restarting network service"
}

# Install network tools based on OS
install_network_tools() {
    local os_type="$1"

    log_info "Installing network tools for $os_type system..."

    case "$os_type" in
        "debian")
            lxc_exec "apt-get update && apt-get install -y curl wget net-tools iputils-ping dnsutils iproute2" "Installing network tools (apt)"
            ;;
        "rhel")
            lxc_exec "yum install -y curl wget net-tools iputils bind-utils iproute" "Installing network tools (yum)"
            ;;
        "alpine")
            lxc_exec "apk add curl wget net-tools iputils bind-tools iproute2" "Installing network tools (apk)"
            ;;
        *)
            log_warning "Unknown OS type: $os_type. Skipping tool installation."
            ;;
    esac
}

# Test network connectivity
test_network() {
    log_info "Testing network connectivity..."

    # Test local network interface
    if lxc_exec "ip addr show eth0" "Checking network interface"; then
        log_success "Network interface is up"
    else
        log_error "Network interface check failed"
        return 1
    fi

    # Test default route
    if lxc_exec "ip route show default" "Checking default route"; then
        log_success "Default route is configured"
    else
        log_error "No default route found"
        return 1
    fi

    # Test DNS resolution
    if lxc_exec "nslookup google.com" "Testing DNS resolution"; then
        log_success "DNS resolution is working"
    else
        log_error "DNS resolution failed"
        return 1
    fi

    # Test internet connectivity
    if lxc_exec "ping -c 3 8.8.8.8" "Testing internet connectivity"; then
        log_success "Internet connectivity is working"
    else
        log_error "Internet connectivity failed"
        return 1
    fi

    return 0
}

# Show network status
show_network_status() {
    log_info "Current network status for CT$LXC_ID:"
    echo

    echo "=== Network Interfaces ==="
    lxc_exec "ip addr show" "Getting network interfaces"

    echo -e "\n=== Routing Table ==="
    lxc_exec "ip route show" "Getting routing table"

    echo -e "\n=== DNS Configuration ==="
    lxc_exec "cat /etc/resolv.conf" "Getting DNS configuration"

    echo -e "\n=== Network Connectivity Test ==="
    test_network
}

# Main configuration function
configure_network() {
    local mode="$1"
    local ip="$2"
    local gateway="$3"

    log_info "Configuring network for CT$LXC_ID (mode: $mode)"

    # Check if container is running
    if ! pct status "$LXC_ID" | grep -q "running"; then
        log_error "Container CT$LXC_ID is not running"
        exit 1
    fi

    # Detect OS
    local os_type
    os_type=$(detect_container_os)
    log_info "Detected OS type: $os_type"

    # Install network tools
    install_network_tools "$os_type"

    # Configure network based on OS
    case "$os_type" in
        "debian")
            configure_debian_network "$mode" "$ip" "$gateway"
            ;;
        "rhel")
            configure_rhel_network "$mode" "$ip" "$gateway"
            ;;
        "alpine")
            configure_alpine_network "$mode" "$ip" "$gateway"
            ;;
        *)
            log_error "Unsupported OS type: $os_type"
            exit 1
            ;;
    esac

    # Wait for network to settle
    sleep 5

    # Test configuration
    if test_network; then
        log_success "Network configuration completed successfully"
    else
        log_error "Network configuration failed"
        exit 1
    fi
}

# Show help
show_help() {
    cat << EOF
LXC Network Configuration Helper Script

Usage: $0 [LXC_ID] [MODE] [STATIC_IP] [GATEWAY] [DNS_SERVERS]

Parameters:
    LXC_ID       - LXC container ID (default: 101)
    MODE         - Network mode: dhcp, static, or bridge (default: dhcp)
    STATIC_IP    - Static IP address (required for static mode)
    GATEWAY      - Gateway IP address (required for static mode)
    DNS_SERVERS  - Comma-separated DNS servers (default: 8.8.8.8,1.1.1.1)

Commands:
    configure    - Configure network (default)
    status       - Show network status
    test         - Test network connectivity
    help         - Show this help

Examples:
    # Configure DHCP (default)
    $0 101 dhcp

    # Configure static IP
    $0 101 static 192.168.1.100 192.168.1.1 8.8.8.8,1.1.1.1

    # Show status
    $0 101 status

    # Test connectivity
    $0 101 test

EOF
}

# Parse command line arguments
COMMAND="${1:-configure}"

case "$COMMAND" in
    configure)
        if [[ $# -ge 2 ]]; then
            LXC_ID="$1"
            NETWORK_MODE="$2"
            STATIC_IP="${3:-}"
            GATEWAY="${4:-}"
            DNS_SERVERS="${5:-8.8.8.8,1.1.1.1}"
        fi
        configure_network "$NETWORK_MODE" "$STATIC_IP" "$GATEWAY"
        ;;
    status)
        if [[ $# -ge 2 ]]; then
            LXC_ID="$2"
        fi
        show_network_status
        ;;
    test)
        if [[ $# -ge 2 ]]; then
            LXC_ID="$2"
        fi
        test_network
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        # Treat as LXC_ID if it's a number
        if [[ "$COMMAND" =~ ^[0-9]+$ ]]; then
            LXC_ID="$COMMAND"
            NETWORK_MODE="${2:-dhcp}"
            STATIC_IP="${3:-}"
            GATEWAY="${4:-}"
            DNS_SERVERS="${5:-8.8.8.8,1.1.1.1}"
            configure_network "$NETWORK_MODE" "$STATIC_IP" "$GATEWAY"
        else
            log_error "Unknown command: $COMMAND"
            show_help
            exit 1
        fi
        ;;
esac