// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Next-Auth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Core PMS Models
enum UserRole {
  SUPER_ADMIN
  OWNER
  MANAGER
  FRONT_DESK
  HOUSEKEEPING
  MAINTENANCE
  ACCOUNTANT
  GUEST
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          UserRole  @default(GUEST)
  status        UserStatus @default(ACTIVE)
  language      String    @default("en")

  // Multi-tenant support
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  // Auth relations
  accounts      Account[]
  sessions      Session[]

  // PMS Relations
  guestProfile  Guest?
  staffProfile  Staff?

  // Operations Relations
  assignedTasks    Task[] @relation("AssignedTasks")
  createdTasks     Task[] @relation("CreatedTasks")
  housekeepingInspections HousekeepingTask[]
  maintenanceWork  MaintenanceRequest[] @relation("MaintenanceTechnician")
  stockMovements   StockMovement[]
  operationalLogs  OperationalLog[]

  // Guest Experience Relations
  assignedServiceRequests ServiceRequest[]
  staffMessages      Message[] @relation("MessageStaff")
  reviewResponses    Review[]  @relation("ReviewResponder")

  // Analytics Relations
  reportTemplates    ReportTemplate[]
  dataExports        DataExport[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

enum OrganizationType {
  HOTEL
  RESORT
  APARTMENT
  VILLA
  HOSTEL
  BNB
}

model Organization {
  id          String           @id @default(cuid())
  name        String
  type        OrganizationType @default(HOTEL)
  email       String
  phone       String
  address     String
  city        String
  country     String           @default("Cyprus")
  postalCode  String?

  // Tax info
  vatNumber   String?
  taxId       String?

  // Settings
  currency    String           @default("EUR")
  timezone    String           @default("Europe/Nicosia")
  language    String           @default("en")

  // Relations
  users       User[]
  properties  Property[]
  staff       Staff[]

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("organizations")
}

enum PropertyType {
  HOTEL
  RESORT
  APARTMENT_BUILDING
  VILLA
  HOSTEL
  BOUTIQUE_HOTEL
  SERVICED_APARTMENT
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  COMING_SOON
}

model Property {
  id             String         @id @default(cuid())
  name           String
  type           PropertyType   @default(HOTEL)
  status         PropertyStatus @default(ACTIVE)

  // Contact
  email          String
  phone          String
  website        String?

  // Address
  address        String
  city           String
  country        String         @default("Cyprus")
  postalCode     String?
  latitude       Float?
  longitude      Float?

  // Details
  description    String?
  checkInTime    String         @default("15:00")
  checkOutTime   String         @default("11:00")
  starRating     Int?

  // Multi-tenant
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id])

  // Relations
  rooms          Room[]
  reservations   Reservation[]
  amenities      PropertyAmenity[]
  staff          Staff[]

  // Operations Relations
  tasks           Task[]
  shifts          Shift[]
  inventoryItems  InventoryItem[]
  operationalLogs OperationalLog[]

  // Guest Experience Relations
  serviceRequests ServiceRequest[]
  messages        Message[]
  reviews         Review[]
  guestActivities GuestActivity[]
  pointTransactions PointTransaction[]

  // Analytics Relations
  analyticsSnapshots AnalyticsSnapshot[]
  performanceMetrics PerformanceMetric[]
  forecastModels     ForecastModel[]
  businessRules      BusinessRule[]

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@map("properties")
}

enum RoomType {
  STANDARD
  DELUXE
  SUITE
  STUDIO
  APARTMENT
  VILLA
  DORMITORY
  FAMILY
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  OUT_OF_ORDER
  MAINTENANCE
  DIRTY
  CLEAN
}

model Room {
  id          String     @id @default(cuid())
  number      String
  name        String?
  type        RoomType   @default(STANDARD)
  status      RoomStatus @default(AVAILABLE)

  // Details
  floor       Int?
  maxGuests   Int        @default(2)
  bedCount    Int        @default(1)
  size        Float?     // in square meters

  // Pricing
  baseRate    Float

  // Features
  description String?
  images      String?    // JSON array of image URLs

  // Relations
  propertyId  String
  property    Property   @relation(fields: [propertyId], references: [id])
  amenities   RoomAmenity[]
  reservations Reservation[]

  // Operations Relations
  tasks           Task[]
  operationalLogs OperationalLog[]

  // Guest Experience Relations
  serviceRequests ServiceRequest[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([propertyId, number])
  @@map("rooms")
}

model Guest {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])

  // Personal info
  firstName     String
  lastName      String
  dateOfBirth   DateTime?
  nationality   String?
  passportNumber String?
  idNumber      String?

  // Contact
  address       String?
  city          String?
  country       String?
  postalCode    String?

  // Preferences
  dietaryRequests String?
  specialRequests String?
  preferences     Json?

  // Relations
  reservations  Reservation[]
  guestProfile  GuestProfile?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("guests")
}

model Staff {
  id             String       @id @default(cuid())
  userId         String       @unique
  user           User         @relation(fields: [userId], references: [id])

  // Employment
  employeeId     String       @unique
  department     String
  position       String
  hireDate       DateTime
  salary         Float?

  // Multi-tenant
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  propertyId     String?
  property       Property?    @relation(fields: [propertyId], references: [id])

  // Operations Relations
  schedules       StaffSchedule[]

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("staff")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  REFUNDED
  FAILED
}

model Reservation {
  id            String            @id @default(cuid())
  confirmationNumber String       @unique @default(cuid())

  // Dates
  checkIn       DateTime
  checkOut      DateTime
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Guest info
  guestId       String
  guest         Guest             @relation(fields: [guestId], references: [id])
  guestCount    Int               @default(1)
  childCount    Int               @default(0)

  // Booking details
  status        ReservationStatus @default(PENDING)
  paymentStatus PaymentStatus     @default(PENDING)

  // Pricing
  roomRate      Float
  totalAmount   Float
  paidAmount    Float             @default(0)
  taxAmount     Float             @default(0)

  // Source
  source        String            @default("Direct") // Direct, Booking.com, Expedia, etc.
  channel       String?

  // Notes
  specialRequests String?
  internalNotes   String?

  // Relations
  propertyId    String
  property      Property          @relation(fields: [propertyId], references: [id])
  roomId        String
  room          Room              @relation(fields: [roomId], references: [id])

  // Guest Experience Relations
  messages        Message[]
  reviews         Review[]
  guestActivities GuestActivity[]
  pointTransactions PointTransaction[]

  @@map("reservations")
}

// Amenity system for flexible features
model PropertyAmenity {
  id         String   @id @default(cuid())
  name       String
  category   String   // Pool, Fitness, Business, etc.
  icon       String?
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])

  createdAt  DateTime @default(now())

  @@map("property_amenities")
}

model RoomAmenity {
  id       String @id @default(cuid())
  name     String
  category String // Bathroom, Entertainment, Comfort, etc.
  icon     String?
  roomId   String
  room     Room   @relation(fields: [roomId], references: [id])

  createdAt DateTime @default(now())

  @@map("room_amenities")
}

// Operations Management Models

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  URGENT
}

enum TaskType {
  HOUSEKEEPING
  MAINTENANCE
  FRONT_DESK
  ADMIN
  OTHER
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  type        TaskType
  status      TaskStatus   @default(PENDING)
  priority    TaskPriority @default(MEDIUM)

  // Scheduling
  dueDate     DateTime?
  scheduledFor DateTime?
  completedAt DateTime?
  estimatedDuration Int?  // in minutes

  // Assignment
  assignedToId String?
  assignedTo   User?       @relation("AssignedTasks", fields: [assignedToId], references: [id])
  createdById  String
  createdBy    User        @relation("CreatedTasks", fields: [createdById], references: [id])

  // Location
  propertyId   String?
  property     Property?   @relation(fields: [propertyId], references: [id])
  roomId       String?
  room         Room?       @relation(fields: [roomId], references: [id])

  // Relations
  housekeepingTask HousekeepingTask?
  maintenanceTask  MaintenanceRequest?

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("tasks")
}

enum HousekeepingTaskType {
  CHECKOUT_CLEANING
  MAINTENANCE_CLEANING
  DEEP_CLEANING
  INSPECTION
  TURNOVER_CLEANING
  PREVENTIVE_CLEANING
}

enum HousekeepingStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  QUALITY_CHECK
  APPROVED
  REJECTED
}

model HousekeepingTask {
  id          String               @id @default(cuid())
  taskId      String               @unique
  task        Task                 @relation(fields: [taskId], references: [id], onDelete: Cascade)

  type        HousekeepingTaskType @default(CHECKOUT_CLEANING)
  status      HousekeepingStatus   @default(SCHEDULED)

  // Details
  guestCheckout DateTime?
  nextCheckIn   DateTime?
  specialInstructions String?

  // Quality control
  qualityScore     Int?      // 1-10
  qualityNotes     String?
  inspectedById    String?
  inspectedBy      User?     @relation(fields: [inspectedById], references: [id])
  inspectedAt      DateTime?

  // Time tracking
  startedAt       DateTime?
  completedAt     DateTime?
  duration        Int?       // in minutes

  // Supplies used
  suppliesUsed    Json?      // Array of {item, quantity}

  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@map("housekeeping_tasks")
}

enum MaintenanceRequestType {
  PLUMBING
  ELECTRICAL
  HVAC
  APPLIANCE
  FURNITURE
  SAFETY
  CLEANING_EQUIPMENT
  GENERAL
  EMERGENCY
}

enum MaintenanceStatus {
  SUBMITTED
  ACKNOWLEDGED
  ASSIGNED
  IN_PROGRESS
  PARTS_ORDERED
  COMPLETED
  VERIFIED
  CLOSED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  EMERGENCY
}

model MaintenanceRequest {
  id              String              @id @default(cuid())
  requestNumber   String              @unique @default(cuid())
  taskId          String              @unique
  task            Task                @relation(fields: [taskId], references: [id], onDelete: Cascade)

  type            MaintenanceRequestType
  status          MaintenanceStatus   @default(SUBMITTED)
  priority        MaintenancePriority @default(MEDIUM)

  // Details
  issue           String
  description     String?
  images          String?             // JSON array of image URLs

  // Assignment
  technicianId    String?
  technician      User?               @relation("MaintenanceTechnician", fields: [technicianId], references: [id])

  // Vendor info
  vendorName      String?
  vendorContact   String?
  vendorCost      Float?

  // Parts and materials
  partsRequired   Json?               // Array of parts needed
  partsOrdered    Boolean             @default(false)
  partsReceived   Boolean             @default(false)

  // Resolution
  resolution      String?
  workPerformed   String?
  timeSpent       Int?                // in minutes

  // Dates
  reportedAt      DateTime            @default(now())
  acknowledgedAt  DateTime?
  startedAt       DateTime?
  completedAt     DateTime?
  verifiedAt      DateTime?

  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@map("maintenance_requests")
}

enum ShiftType {
  MORNING
  AFTERNOON
  EVENING
  NIGHT
  FULL_DAY
  SPLIT
}

model Shift {
  id          String    @id @default(cuid())
  name        String
  type        ShiftType

  // Timing
  startTime   String    // HH:MM format
  endTime     String    // HH:MM format
  breakDuration Int?    // minutes

  // Days
  monday      Boolean   @default(false)
  tuesday     Boolean   @default(false)
  wednesday   Boolean   @default(false)
  thursday    Boolean   @default(false)
  friday      Boolean   @default(false)
  saturday    Boolean   @default(false)
  sunday      Boolean   @default(false)

  // Property specific
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id])

  // Relations
  schedules   StaffSchedule[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("shifts")
}

enum ScheduleStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  ABSENT
  LATE
  LEFT_EARLY
}

model StaffSchedule {
  id          String         @id @default(cuid())

  // Staff and shift
  staffId     String
  staff       Staff          @relation(fields: [staffId], references: [id])
  shiftId     String
  shift       Shift          @relation(fields: [shiftId], references: [id])

  // Date
  date        DateTime
  status      ScheduleStatus @default(SCHEDULED)

  // Time tracking
  clockIn     DateTime?
  clockOut    DateTime?
  breakStart  DateTime?
  breakEnd    DateTime?

  // Notes
  notes       String?
  managerNotes String?

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@unique([staffId, date, shiftId])
  @@map("staff_schedules")
}

enum InventoryCategory {
  LINENS
  TOILETRIES
  CLEANING_SUPPLIES
  MINIBAR
  AMENITIES
  OFFICE_SUPPLIES
  MAINTENANCE_PARTS
  FOOD_BEVERAGE
  OTHER
}

model InventoryItem {
  id              String            @id @default(cuid())
  name            String
  description     String?
  category        InventoryCategory
  sku             String?           @unique

  // Stock levels
  currentStock    Int               @default(0)
  minimumStock    Int               @default(0)
  maximumStock    Int               @default(0)
  reorderPoint    Int               @default(0)

  // Pricing
  unitCost        Float?
  supplierPrice   Float?

  // Units
  unit            String            // pieces, kg, liters, etc.

  // Storage location
  location        String?

  // Supplier info
  supplierName    String?
  supplierContact String?

  // Property
  propertyId      String
  property        Property          @relation(fields: [propertyId], references: [id])

  // Relations
  movements       StockMovement[]

  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("inventory_items")
}

enum MovementType {
  STOCK_IN
  STOCK_OUT
  ADJUSTMENT
  TRANSFER
  DAMAGED
  EXPIRED
  THEFT
}

model StockMovement {
  id              String        @id @default(cuid())

  // Item
  itemId          String
  item            InventoryItem @relation(fields: [itemId], references: [id])

  // Movement details
  type            MovementType
  quantity        Int
  previousStock   Int
  newStock        Int

  // Cost
  unitCost        Float?
  totalCost       Float?

  // Reference
  referenceNumber String?
  notes           String?

  // User
  userId          String
  user            User          @relation(fields: [userId], references: [id])

  createdAt       DateTime      @default(now())

  @@map("stock_movements")
}

model OperationalLog {
  id          String   @id @default(cuid())

  // Event details
  event       String
  description String?
  category    String   // housekeeping, maintenance, front_desk, etc.
  severity    String   @default("info") // info, warning, error, critical

  // Context
  propertyId  String?
  property    Property? @relation(fields: [propertyId], references: [id])
  roomId      String?
  room        Room?     @relation(fields: [roomId], references: [id])
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])

  // Metadata
  metadata    Json?

  createdAt   DateTime @default(now())

  @@map("operational_logs")
}

// Guest Experience & Communication Models

enum ServiceRequestType {
  ROOM_SERVICE
  HOUSEKEEPING
  CONCIERGE
  MAINTENANCE
  TRANSPORTATION
  SPA_WELLNESS
  RESTAURANT
  ACTIVITY_BOOKING
  SPECIAL_REQUEST
  OTHER
}

enum ServiceRequestStatus {
  REQUESTED
  ACKNOWLEDGED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MessageType {
  SMS
  WHATSAPP
  IN_APP
  EMAIL
  PUSH_NOTIFICATION
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum LoyaltyTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

enum ReviewPlatform {
  BOOKING_COM
  TRIPADVISOR
  GOOGLE
  AIRBNB
  EXPEDIA
  DIRECT
  OTHER
}

model GuestProfile {
  id            String @id @default(cuid())

  // Guest reference
  guestId       String
  guest         Guest  @relation(fields: [guestId], references: [id])

  // Preferences
  preferredLanguage  String?  @default("en")
  dietary           String?  // JSON array of dietary restrictions
  roomPreferences   String?  // JSON object of room preferences
  servicePreferences String? // JSON object of service preferences
  allergies         String?  // JSON array of allergies

  // Special notes
  notes            String?
  vipStatus        Boolean  @default(false)
  specialRequests  String?  // JSON array of common special requests

  // Communication preferences
  preferredContact MessageType @default(EMAIL)
  phoneVerified    Boolean     @default(false)
  emailVerified    Boolean     @default(false)
  marketingOptIn   Boolean     @default(false)

  // Important dates
  birthday         DateTime?
  anniversary      DateTime?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  serviceRequests  ServiceRequest[]
  messages         Message[]
  loyaltyAccount   LoyaltyAccount?
  reviews          Review[]
  activities       GuestActivity[]

  @@unique([guestId])
  @@map("guest_profiles")
}

model ServiceRequest {
  id            String              @id @default(cuid())

  // Request details
  type          ServiceRequestType
  status        ServiceRequestStatus @default(REQUESTED)
  priority      TaskPriority        @default(MEDIUM)

  title         String
  description   String
  requestedTime DateTime?

  // Guest information
  guestProfileId String
  guestProfile  GuestProfile @relation(fields: [guestProfileId], references: [id])

  // Location
  propertyId    String?
  property      Property? @relation(fields: [propertyId], references: [id])
  roomId        String?
  room          Room?     @relation(fields: [roomId], references: [id])

  // Staff assignment
  assignedToId  String?
  assignedTo    User?     @relation(fields: [assignedToId], references: [id])

  // Cost and billing
  estimatedCost Float?
  actualCost    Float?
  billedToRoom  Boolean   @default(true)

  // Fulfillment
  completedAt   DateTime?
  guestRating   Int?      // 1-5 rating
  guestFeedback String?

  // Metadata
  metadata      Json?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("service_requests")
}

model Message {
  id              String        @id @default(cuid())

  // Message details
  type            MessageType
  status          MessageStatus @default(PENDING)
  subject         String?
  content         String

  // Participants
  guestProfileId  String
  guestProfile    GuestProfile @relation(fields: [guestProfileId], references: [id])
  staffId         String?
  staff           User?        @relation("MessageStaff", fields: [staffId], references: [id])

  // Delivery info
  recipient       String       // phone number, email, device token
  sentAt          DateTime?
  deliveredAt     DateTime?
  readAt          DateTime?

  // Context
  propertyId      String?
  property        Property?    @relation(fields: [propertyId], references: [id])
  reservationId   String?
  reservation     Reservation? @relation(fields: [reservationId], references: [id])

  // Template and automation
  templateId      String?
  isAutomated     Boolean      @default(false)

  // Response handling
  parentId        String?
  parent          Message?     @relation("MessageThread", fields: [parentId], references: [id])
  replies         Message[]    @relation("MessageThread")

  createdAt       DateTime     @default(now())

  @@map("messages")
}

model LoyaltyAccount {
  id            String      @id @default(cuid())

  // Guest reference
  guestProfileId String     @unique
  guestProfile  GuestProfile @relation(fields: [guestProfileId], references: [id])

  // Account details
  membershipNumber String   @unique
  tier            LoyaltyTier @default(BRONZE)
  points          Int         @default(0)
  lifetimePoints  Int         @default(0)

  // Tier progress
  tierExpiresAt   DateTime?
  pointsToNext    Int?        // Points needed for next tier

  // Benefits
  complimentaryNights Int     @default(0)
  roomUpgrades        Int     @default(0)

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  pointTransactions PointTransaction[]

  @@map("loyalty_accounts")
}

enum TransactionType {
  EARNED
  REDEEMED
  EXPIRED
  BONUS
  ADJUSTMENT
}

model PointTransaction {
  id                String          @id @default(cuid())

  // Account reference
  loyaltyAccountId  String
  loyaltyAccount    LoyaltyAccount  @relation(fields: [loyaltyAccountId], references: [id])

  // Transaction details
  type              TransactionType
  points            Int             // Positive for earned, negative for redeemed
  description       String

  // Context
  reservationId     String?
  reservation       Reservation?    @relation(fields: [reservationId], references: [id])
  propertyId        String?
  property          Property?       @relation(fields: [propertyId], references: [id])

  // Expiration (for earned points)
  expiresAt         DateTime?

  createdAt         DateTime        @default(now())

  @@map("point_transactions")
}

model Review {
  id              String         @id @default(cuid())

  // Platform and identification
  platform        ReviewPlatform
  externalId      String?        // ID on the review platform

  // Guest information
  guestProfileId  String?
  guestProfile    GuestProfile?  @relation(fields: [guestProfileId], references: [id])
  reviewerName    String
  reviewerEmail   String?

  // Review content
  rating          Int            // 1-10 scale (converted from platform scale)
  title           String?
  content         String

  // Breakdown ratings
  cleanlinessRating Int?
  serviceRating     Int?
  locationRating    Int?
  valueRating       Int?

  // Context
  propertyId      String?
  property        Property?      @relation(fields: [propertyId], references: [id])
  reservationId   String?
  reservation     Reservation?   @relation(fields: [reservationId], references: [id])

  // Response management
  hasResponse     Boolean        @default(false)
  response        String?
  respondedAt     DateTime?
  respondedById   String?
  respondedBy     User?          @relation("ReviewResponder", fields: [respondedById], references: [id])

  // Analytics
  sentiment       String?        // positive, neutral, negative
  keywords        String?        // JSON array of extracted keywords
  isVerified      Boolean        @default(false)

  // Dates
  reviewDate      DateTime
  stayDate        DateTime?

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("reviews")
}

model GuestActivity {
  id              String         @id @default(cuid())

  // Guest reference
  guestProfileId  String
  guestProfile    GuestProfile   @relation(fields: [guestProfileId], references: [id])

  // Activity details
  type            String         // spa, restaurant, tour, transport, etc.
  name            String
  description     String?

  // Booking details
  bookedFor       DateTime
  duration        Int?           // minutes
  participants    Int            @default(1)

  // Pricing
  price           Float?
  currency        String         @default("EUR")
  isPaid          Boolean        @default(false)

  // Status
  status          String         @default("confirmed") // confirmed, cancelled, completed, no_show

  // Location/Vendor
  vendor          String?
  location        String?
  contactInfo     String?

  // Context
  propertyId      String?
  property        Property?      @relation(fields: [propertyId], references: [id])
  reservationId   String?
  reservation     Reservation?   @relation(fields: [reservationId], references: [id])

  // Feedback
  guestRating     Int?           // 1-5 rating
  guestFeedback   String?

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("guest_activities")
}

// Analytics & Reporting Models

enum MetricType {
  REVENUE
  OCCUPANCY
  ADR
  REVPAR
  GUEST_SATISFACTION
  RESPONSE_TIME
  STAFF_PRODUCTIVITY
  CUSTOM
}

enum ReportType {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

enum ReportCategory {
  FINANCIAL
  OPERATIONAL
  GUEST
  STAFF
  INVENTORY
  REVIEWS
  LOYALTY
  CUSTOM
}

model AnalyticsSnapshot {
  id            String      @id @default(cuid())

  // Time dimension
  date          DateTime
  hour          Int?        // For hourly snapshots

  // Property context
  propertyId    String?
  property      Property?   @relation(fields: [propertyId], references: [id])

  // Key Performance Indicators
  totalRevenue        Float   @default(0)
  roomRevenue         Float   @default(0)
  serviceRevenue      Float   @default(0)

  totalRooms          Int     @default(0)
  occupiedRooms       Int     @default(0)
  availableRooms      Int     @default(0)
  outOfOrderRooms     Int     @default(0)

  occupancyRate       Float   @default(0)  // Percentage
  adr                 Float   @default(0)  // Average Daily Rate
  revpar              Float   @default(0)  // Revenue Per Available Room

  totalGuests         Int     @default(0)
  newGuests           Int     @default(0)
  returningGuests     Int     @default(0)

  // Service metrics
  serviceRequests     Int     @default(0)
  completedServices   Int     @default(0)
  avgResponseTime     Float   @default(0)  // In minutes
  guestSatisfaction   Float   @default(0)  // Average rating

  // Staff metrics
  staffOnDuty         Int     @default(0)
  totalStaff          Int     @default(0)

  // Review metrics
  totalReviews        Int     @default(0)
  avgRating           Float   @default(0)
  positiveReviews     Int     @default(0)
  negativeReviews     Int     @default(0)

  // Loyalty metrics
  loyaltyPoints       Int     @default(0)
  loyaltyRedemptions  Int     @default(0)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([propertyId, date, hour])
  @@map("analytics_snapshots")
}

model PerformanceMetric {
  id            String      @id @default(cuid())

  name          String
  description   String?
  type          MetricType
  category      String      // Department or category

  // Metric definition
  formula       String?     // Formula for calculation
  unit          String      // €, %, minutes, etc.

  // Goals and thresholds
  targetValue   Float?
  minThreshold  Float?      // Below this is concerning
  maxThreshold  Float?      // Above this is excellent

  // Current values
  currentValue  Float?
  previousValue Float?

  // Trend analysis
  trend         String?     // up, down, stable
  trendPercent  Float?      // Percentage change

  // Context
  propertyId    String?
  property      Property?   @relation(fields: [propertyId], references: [id])

  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("performance_metrics")
}

model ReportTemplate {
  id            String        @id @default(cuid())

  name          String
  description   String?
  category      ReportCategory
  type          ReportType

  // Configuration
  config        Json          // Chart types, metrics, filters, etc.
  sqlQuery      String?       // For custom queries

  // Styling
  layout        Json?         // Dashboard layout configuration

  // Access control
  createdById   String
  createdBy     User          @relation(fields: [createdById], references: [id])
  isPublic      Boolean       @default(false)

  // Usage tracking
  lastUsed      DateTime?
  useCount      Int           @default(0)

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  exports       DataExport[]

  @@map("report_templates")
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ExportFormat {
  PDF
  EXCEL
  CSV
  JSON
}

model DataExport {
  id              String        @id @default(cuid())

  // Export details
  name            String
  format          ExportFormat
  status          ExportStatus  @default(PENDING)

  // Source
  templateId      String?
  template        ReportTemplate? @relation(fields: [templateId], references: [id])
  customQuery     String?       // For ad-hoc exports

  // Parameters
  dateFrom        DateTime?
  dateTo          DateTime?
  filters         Json?         // Additional filters

  // Output
  filePath        String?       // Path to generated file
  fileSize        Int?          // File size in bytes
  recordCount     Int?          // Number of records exported

  // Error handling
  errorMessage    String?

  // Metadata
  requestedById   String
  requestedBy     User          @relation(fields: [requestedById], references: [id])

  // Scheduling
  isScheduled     Boolean       @default(false)
  scheduleConfig  Json?         // Cron expression, recipients, etc.
  nextRunAt       DateTime?

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("data_exports")
}

model ForecastModel {
  id            String      @id @default(cuid())

  name          String
  type          String      // occupancy, revenue, demand
  algorithm     String      // linear_regression, arima, seasonal, etc.

  // Model parameters
  parameters    Json        // Algorithm-specific parameters
  accuracy      Float?      // Model accuracy percentage

  // Training data
  trainingStart DateTime
  trainingEnd   DateTime
  dataPoints    Int

  // Predictions
  predictions   Json        // Array of prediction objects
  confidence    Float?      // Overall confidence level

  // Validation
  lastValidated DateTime?
  validationMae Float?      // Mean Absolute Error
  validationRmse Float?     // Root Mean Square Error

  // Context
  propertyId    String?
  property      Property?   @relation(fields: [propertyId], references: [id])

  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("forecast_models")
}

model BusinessRule {
  id            String      @id @default(cuid())

  name          String
  description   String?
  category      String      // pricing, staffing, inventory, etc.

  // Rule definition
  conditions    Json        // Array of condition objects
  actions       Json        // Array of action objects
  priority      Int         @default(100)

  // Execution
  isActive      Boolean     @default(true)
  lastExecuted  DateTime?
  executionCount Int        @default(0)

  // Results
  successCount  Int         @default(0)
  failureCount  Int         @default(0)
  lastResult    String?     // success, failure, partial

  // Context
  propertyId    String?
  property      Property?   @relation(fields: [propertyId], references: [id])

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("business_rules")
}

