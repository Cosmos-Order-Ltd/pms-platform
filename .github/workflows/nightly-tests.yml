name: 'Nightly Quality Assurance'

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  comprehensive-testing:
    name: 'Comprehensive Test Suite'
    runs-on: ubuntu-latest
    timeout-minutes: 60

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite with coverage
        run: |
          npm run test:all
          npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pms_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          NODE_ENV: test

      - name: Install Playwright with all browsers
        run: npx playwright install --with-deps

      - name: Run comprehensive E2E tests
        run: npm run e2e
        env:
          NODE_ENV: test
          # Test against all configured browsers and devices
          PLAYWRIGHT_PROJECTS: chromium-desktop,firefox-desktop,webkit-desktop,ipad-pro,iphone-14,pixel-7,galaxy-s23,slow-3g

      - name: Performance testing
        run: |
          # Install Lighthouse CI
          npm install -g @lhci/cli

          # Build for production
          npm run build

          # Start applications
          npm run start &
          sleep 30

          # Run Lighthouse CI
          lhci autorun --config=.lighthouserc.json
        env:
          NODE_ENV: production

      - name: Upload comprehensive test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nightly-test-reports
          path: |
            playwright-report/
            coverage/
            lighthouse-reports/
          retention-days: 7

  security-audit:
    name: 'Security Audit'
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

      - name: Run OWASP ZAP scan
        run: |
          # Start applications for security testing
          npm run build
          npm run start &
          sleep 30

          # Run ZAP baseline scan
          docker run -v $(pwd):/zap/wrk/:rw \
            -t owasp/zap2docker-stable zap-baseline.py \
            -t http://localhost:3000 \
            -J zap-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            zap-report.json
            snyk-report.json
          retention-days: 30

  dependency-update:
    name: 'Dependency Update Check'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Check for outdated dependencies
        run: |
          npm outdated --json > outdated-deps.json || true
          cat outdated-deps.json

      - name: Create dependency update PR
        if: github.event_name == 'schedule'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies (automated)'
          title: 'ðŸ”„ Automated Dependency Updates'
          body: |
            ## Automated Dependency Updates

            This PR contains automated dependency updates based on nightly checks.

            ### Changes:
            - Updated npm dependencies to latest compatible versions
            - Security patches applied where available

            ### Testing:
            - All tests pass
            - Security audit clean
            - No breaking changes detected

            Please review and merge if all checks pass.
          branch: automated/dependency-updates
          delete-branch: true

  health-monitoring:
    name: 'Production Health Check'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check production health endpoints
        run: |
          # Check all production health endpoints
          curl -f https://api.pms.cosmmos/health
          curl -f https://admin.pms.cosmmos/api/health
          curl -f https://guest.pms.cosmmos/api/health
          curl -f https://staff.pms.cosmmos/api/health
          curl -f https://marketplace.pms.cosmmos/api/health

      - name: Performance monitoring
        run: |
          # Basic performance checks
          curl -w "@curl-format.txt" -o /dev/null -s https://marketplace.pms.cosmmos
        shell: bash

      - name: Report health status
        if: failure()
        run: |
          echo "ðŸš¨ Production health check failed"
          # Here you would typically send alerts to Slack, email, etc.