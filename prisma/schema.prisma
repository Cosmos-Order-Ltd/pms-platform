// Enhanced Prisma schema for complete PMS microservices platform
// Supports: Core, Backend, Admin, Guest, Staff, Marketplace services

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ================================
// CORE AUTHENTICATION & USERS
// ================================

enum UserRole {
  SUPER_ADMIN
  OWNER
  MANAGER
  FRONT_DESK
  HOUSEKEEPING
  MAINTENANCE
  ACCOUNTANT
  GUEST
  MARKETPLACE_AGENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          UserRole  @default(GUEST)
  status        UserStatus @default(ACTIVE)
  language      String    @default("en")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Multi-tenant support
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  // Authentication
  accounts      Account[]
  sessions      Session[]

  // Profile Relations
  guestProfile  Guest?
  staffProfile  Staff?
  agentProfile  MarketplaceAgent?

  // Activity Relations
  assignedTasks    Task[] @relation("AssignedTasks")
  createdTasks     Task[] @relation("CreatedTasks")
  reservations     Reservation[]
  reviews          Review[]
  notifications    Notification[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ================================
// SERVICE MANAGEMENT
// ================================

model ServiceRegistry {
  id          String   @id @default(cuid())
  serviceId   String   @unique
  serviceName String
  version     String
  endpoint    String
  status      String   @default("active")
  apiKey      String
  permissions Json     @default("[]")
  lastSeen    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("service_registry")
}

// ================================
// ORGANIZATION & PROPERTIES
// ================================

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  website     String?
  email       String?
  phone       String?
  address     Json?
  settings    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  properties  Property[]

  @@map("organizations")
}

enum PropertyType {
  HOTEL
  RESORT
  APARTMENT
  VILLA
  HOSTEL
  BNB
  COMMERCIAL
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  COMING_SOON
}

model Property {
  id              String         @id @default(cuid())
  name            String
  description     String?
  type            PropertyType
  status          PropertyStatus @default(ACTIVE)
  address         Json
  coordinates     Json?
  images          String[]       @default([])
  amenities       String[]       @default([])
  policies        Json           @default("{}")
  settings        Json           @default("{}")
  checkInTime     String         @default("15:00")
  checkOutTime    String         @default("11:00")
  currency        String         @default("EUR")
  taxRate         Float          @default(0.19)
  tourismTax      Float          @default(1.5)

  // Cyprus-specific fields
  vatNumber              String?           // Cyprus VAT registration number
  policeStationId        String?           // Assigned police station for guest registration
  cyprusTourismLicense   String?           // Cyprus Tourism Board license number
  vatRate                Float             @default(0.09) // Cyprus accommodation VAT rate (9%)

  // Organization relation
  organizationId  String
  organization    Organization   @relation(fields: [organizationId], references: [id])

  // Relations
  rooms           Room[]
  reservations    Reservation[]
  staff           Staff[]

  // Marketplace
  marketplaceListings MarketplaceListing[]

  // Cyprus-specific relations
  vatReports      CyprusVATReport[]
  policeRegistrations PoliceRegistration[]
  cyprusSettings  CyprusLocalization[]

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("properties")
}

// ================================
// ROOMS & INVENTORY
// ================================

enum RoomType {
  SINGLE
  DOUBLE
  TWIN
  QUEEN
  KING
  SUITE
  FAMILY
  STUDIO
  APARTMENT
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  DIRTY
  CLEANING
  MAINTENANCE
  OUT_OF_ORDER
}

model Room {
  id          String     @id @default(cuid())
  number      String
  name        String?
  type        RoomType
  status      RoomStatus @default(AVAILABLE)
  floor       Int?
  capacity    Int        @default(2)
  basePrice   Float
  description String?
  amenities   String[]   @default([])
  images      String[]   @default([])

  propertyId  String
  property    Property   @relation(fields: [propertyId], references: [id])

  // Relations
  reservations     Reservation[]
  housekeepingTasks HousekeepingTask[]
  maintenanceRequests MaintenanceRequest[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([propertyId, number])
  @@map("rooms")
}

// ================================
// GUEST MANAGEMENT
// ================================

model Guest {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])

  firstName       String
  lastName        String
  dateOfBirth     DateTime?
  nationality     String?
  passportNumber  String?
  address         Json?
  preferences     Json      @default("{}")
  loyaltyPoints   Int       @default(0)
  totalStays      Int       @default(0)
  totalSpent      Float     @default(0)

  // Cyprus-specific fields
  nationalityCode String?   // ISO 3166-1 alpha-3 country code
  cyprusResident  Boolean   @default(false) // Cyprus residency status for police reporting

  reservations    Reservation[]
  reviews         Review[]

  // Cyprus-specific relations
  policeRegistrations PoliceRegistration[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("guests")
}

// ================================
// STAFF MANAGEMENT
// ================================

enum StaffRole {
  MANAGER
  FRONT_DESK
  HOUSEKEEPING
  MAINTENANCE
  SECURITY
  CHEF
  WAITER
  CONCIERGE
}

enum StaffStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  TERMINATED
}

model Staff {
  id            String      @id @default(cuid())
  userId        String      @unique
  user          User        @relation(fields: [userId], references: [id])

  employeeId    String      @unique
  role          StaffRole
  status        StaffStatus @default(ACTIVE)
  department    String?
  salary        Float?
  hireDate      DateTime

  propertyId    String
  property      Property    @relation(fields: [propertyId], references: [id])

  // Work Relations
  assignedTasks      Task[] @relation("AssignedStaff")
  housekeepingTasks  HousekeepingTask[]
  maintenanceWork    MaintenanceRequest[] @relation("MaintenanceTechnician")
  schedules          StaffSchedule[]
  timesheets         Timesheet[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("staff")
}

model StaffSchedule {
  id        String   @id @default(cuid())
  staffId   String
  staff     Staff    @relation(fields: [staffId], references: [id])

  date      DateTime
  startTime String
  endTime   String
  notes     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([staffId, date])
  @@map("staff_schedules")
}

model Timesheet {
  id        String   @id @default(cuid())
  staffId   String
  staff     Staff    @relation(fields: [staffId], references: [id])

  date      DateTime
  clockIn   DateTime?
  clockOut  DateTime?
  breakStart DateTime?
  breakEnd  DateTime?
  totalHours Float?
  notes     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([staffId, date])
  @@map("timesheets")
}

// ================================
// RESERVATIONS & BOOKINGS
// ================================

enum ReservationStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  REFUNDED
  FAILED
}

model Reservation {
  id              String            @id @default(cuid())
  reservationNumber String          @unique

  // Guest Information
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  guestId         String
  guest           Guest             @relation(fields: [guestId], references: [id])

  // Property & Room
  propertyId      String
  property        Property          @relation(fields: [propertyId], references: [id])
  roomId          String
  room            Room              @relation(fields: [roomId], references: [id])

  // Booking Details
  checkIn         DateTime
  checkOut        DateTime
  adults          Int               @default(1)
  children        Int               @default(0)
  nights          Int

  // Pricing
  baseAmount      Float
  taxAmount       Float
  totalAmount     Float
  currency        String            @default("EUR")

  // Cyprus-specific pricing fields
  vatAmount       Float?            // Cyprus VAT amount (9% for accommodation)
  jccReference    String?           // JCC payment gateway reference
  policeReported  Boolean           @default(false) // Police guest registration status

  // Status
  status          ReservationStatus @default(PENDING)
  paymentStatus   PaymentStatus     @default(PENDING)

  // Additional Info
  notes           String?
  specialRequests String?
  source          String?           // website, booking.com, etc.

  // Relations
  payments        Payment[]
  reviews         Review[]

  // Cyprus-specific relations
  policeRegistrations PoliceRegistration[]
  jccTransactions     JCCTransaction[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("reservations")
}

model Payment {
  id            String        @id @default(cuid())
  reservationId String
  reservation   Reservation   @relation(fields: [reservationId], references: [id])

  amount        Float
  currency      String        @default("EUR")
  method        String        // card, cash, bank_transfer
  status        PaymentStatus

  // Payment Gateway Info
  gatewayId     String?
  gatewayData   Json?

  processedAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payments")
}

// ================================
// OPERATIONS & TASKS
// ================================

enum TaskType {
  HOUSEKEEPING
  MAINTENANCE
  FRONT_DESK
  GENERAL
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Task {
  id              String       @id @default(cuid())
  title           String
  description     String?
  type            TaskType
  status          TaskStatus   @default(PENDING)
  priority        TaskPriority @default(MEDIUM)

  estimatedTime   Int?         // minutes
  actualTime      Int?         // minutes
  dueDate         DateTime?

  assignedToId    String?
  assignedTo      User?        @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedStaffId String?
  assignedStaff   Staff?       @relation("AssignedStaff", fields: [assignedStaffId], references: [id])

  createdById     String
  createdBy       User         @relation("CreatedTasks", fields: [createdById], references: [id])

  completedAt     DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("tasks")
}

model HousekeepingTask {
  id          String     @id @default(cuid())
  roomId      String
  room        Room       @relation(fields: [roomId], references: [id])

  staffId     String
  staff       Staff      @relation(fields: [staffId], references: [id])

  inspectorId String?
  inspector   User?      @relation(fields: [inspectorId], references: [id])

  type        String     // cleaning, inspection, maintenance
  status      TaskStatus @default(PENDING)

  checklist   Json       @default("{}")
  notes       String?
  images      String[]   @default([])

  startTime   DateTime?
  endTime     DateTime?

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("housekeeping_tasks")
}

model MaintenanceRequest {
  id            String       @id @default(cuid())
  title         String
  description   String
  priority      TaskPriority @default(MEDIUM)
  status        TaskStatus   @default(PENDING)

  roomId        String?
  room          Room?        @relation(fields: [roomId], references: [id])

  technicianId  String?
  technician    Staff?       @relation("MaintenanceTechnician", fields: [technicianId], references: [id])

  reportedById  String
  reportedBy    User         @relation(fields: [reportedById], references: [id])

  estimatedCost Float?
  actualCost    Float?

  scheduledDate DateTime?
  completedDate DateTime?

  notes         String?
  images        String[]     @default([])

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("maintenance_requests")
}

// ================================
// REVIEWS & RATINGS
// ================================

model Review {
  id            String      @id @default(cuid())
  reservationId String
  reservation   Reservation @relation(fields: [reservationId], references: [id])

  userId        String
  user          User        @relation(fields: [userId], references: [id])
  guestId       String
  guest         Guest       @relation(fields: [guestId], references: [id])

  rating        Int         // 1-5
  title         String?
  comment       String?

  // Detailed Ratings
  cleanlinessRating  Int?
  serviceRating      Int?
  locationRating     Int?
  valueRating        Int?

  isPublic      Boolean     @default(true)
  isVerified    Boolean     @default(false)

  response      String?     // Property response
  responseDate  DateTime?

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([reservationId])
  @@map("reviews")
}

// ================================
// MARKETPLACE FUNCTIONALITY
// ================================

enum ListingType {
  SALE
  RENT
  VACATION_RENTAL
}

enum ListingStatus {
  ACTIVE
  INACTIVE
  SOLD
  RENTED
  PENDING
}

model MarketplaceAgent {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])

  licenseNumber String?
  agency      String?
  website     String?
  bio         String?
  specialties String[] @default([])

  listings    MarketplaceListing[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("marketplace_agents")
}

model MarketplaceListing {
  id              String        @id @default(cuid())
  title           String
  description     String
  type            ListingType
  status          ListingStatus @default(ACTIVE)

  // Property Reference (optional - for existing PMS properties)
  propertyId      String?
  property        Property?     @relation(fields: [propertyId], references: [id])

  // Property Details
  propertyType    String        // apartment, villa, hotel, commercial
  bedrooms        Int?
  bathrooms       Int?
  area            Float?        // square meters
  yearBuilt       Int?

  // Location
  address         Json
  coordinates     Json?

  // Pricing
  price           Float
  priceUnit       String?       // month, year (for rentals)
  currency        String        @default("EUR")

  // Features
  features        String[]      @default([])
  amenities       String[]      @default([])
  images          String[]      @default([])
  virtualTour     String?

  // Agent
  agentId         String
  agent           MarketplaceAgent @relation(fields: [agentId], references: [id])

  // Commission
  commission      Float?        // percentage

  // SEO
  slug            String        @unique
  tags            String[]      @default([])

  // Analytics
  views           Int           @default(0)
  inquiries       Int           @default(0)
  favorites       Int           @default(0)

  // Availability (for vacation rentals)
  availableFrom   DateTime?
  availableTo     DateTime?
  minimumStay     Int?          // nights

  isFeatured      Boolean       @default(false)
  isVerified      Boolean       @default(false)

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("marketplace_listings")
}

// ================================
// INVENTORY & SUPPLIES
// ================================

model StockItem {
  id            String   @id @default(cuid())
  name          String
  description   String?
  category      String
  unit          String   // pieces, liters, kg, etc.
  currentStock  Float    @default(0)
  minimumStock  Float    @default(0)
  maxStock      Float?
  unitCost      Float?
  supplier      String?

  movements     StockMovement[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("stock_items")
}

model StockMovement {
  id          String    @id @default(cuid())
  itemId      String
  item        StockItem @relation(fields: [itemId], references: [id])

  type        String    // in, out, adjustment
  quantity    Float
  reason      String?
  reference   String?   // purchase order, reservation number, etc.

  userId      String
  user        User      @relation(fields: [userId], references: [id])

  createdAt   DateTime  @default(now())

  @@map("stock_movements")
}

// ================================
// NOTIFICATIONS & COMMUNICATIONS
// ================================

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id])

  type      NotificationType @default(INFO)
  title     String
  message   String
  data      Json?

  isRead    Boolean          @default(false)
  readAt    DateTime?

  createdAt DateTime         @default(now())

  @@map("notifications")
}

// ================================
// SYSTEM & ANALYTICS
// ================================

model OperationalLog {
  id         String   @id @default(cuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])

  action     String
  resource   String
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?

  createdAt  DateTime @default(now())

  @@map("operational_logs")
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  category  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

// ================================
// CYPRUS-SPECIFIC MODELS
// ================================

// Cyprus VAT reporting for compliance
enum VATReportStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

model CyprusVATReport {
  id              String         @id @default(cuid())
  propertyId      String
  property        Property       @relation(fields: [propertyId], references: [id])

  quarter         Int            // 1-4 for quarterly reporting
  year            Int
  reportingPeriod String         // "Q1 2024", etc.

  // Financial data
  totalRevenue    Float          // Total accommodation revenue
  vatCollected    Float          // 9% VAT collected
  taxableAmount   Float          // Revenue subject to VAT
  exemptAmount    Float?         // Revenue exempt from VAT

  // Submission details
  submissionDate  DateTime?
  tfaReference    String?        // Tax For All (TFA) reference number
  status          VATReportStatus @default(DRAFT)

  // Audit trail
  preparedBy      String?        // User who prepared the report
  reviewedBy      String?        // User who reviewed the report
  notes           String?

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@unique([propertyId, quarter, year])
  @@map("cyprus_vat_reports")
}

// Police guest registration for Cyprus compliance
enum PoliceRegistrationStatus {
  PENDING
  SUBMITTED
  CONFIRMED
  FAILED
  EXPIRED
}

model PoliceRegistration {
  id              String                  @id @default(cuid())
  propertyId      String
  property        Property                @relation(fields: [propertyId], references: [id])
  guestId         String
  guest           Guest                   @relation(fields: [guestId], references: [id])
  reservationId   String
  reservation     Reservation             @relation(fields: [reservationId], references: [id])

  // Registration details
  passportNumber  String
  nationality     String
  arrivalDate     DateTime
  departureDate   DateTime
  roomNumber      String

  // Submission details
  submissionDate  DateTime?
  referenceNumber String?                 // Police system reference
  status          PoliceRegistrationStatus @default(PENDING)

  // Compliance tracking
  submittedBy     String?                 // Staff member who submitted
  confirmationCode String?               // Police system confirmation
  errorMessage    String?                // Error details if submission failed

  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt

  @@unique([guestId, reservationId])
  @@map("police_registrations")
}

// JCC payment gateway transactions
enum JCCTransactionStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  SETTLED
  FAILED
  CANCELLED
  REFUNDED
}

enum JCCPaymentMethod {
  VISA
  MASTERCARD
  MAESTRO
  AMERICAN_EXPRESS
  LOCAL_BANK
}

model JCCTransaction {
  id              String              @id @default(cuid())
  reservationId   String
  reservation     Reservation         @relation(fields: [reservationId], references: [id])

  // JCC transaction details
  jccTransactionId String             @unique // JCC system transaction ID
  merchantReference String            // Merchant reference number
  token           String?             // Tokenized card details

  // Payment details
  amount          Float
  currency        String              @default("EUR")
  paymentMethod   JCCPaymentMethod
  cardLast4       String?             // Last 4 digits of card
  cardBrand       String?             // Card brand (Visa, MC, etc.)

  // 3D Secure details
  threeDSAuth     Boolean             @default(false)
  threeDSReference String?           // 3D Secure authentication reference

  // Transaction status
  status          JCCTransactionStatus @default(PENDING)
  authCode        String?             // Authorization code
  settlementDate  DateTime?           // Date funds were settled

  // Error handling
  errorCode       String?
  errorMessage    String?

  // Audit trail
  initiatedBy     String?             // User who initiated the transaction
  ipAddress       String?             // Client IP address

  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@map("jcc_transactions")
}

// Cyprus SMS provider integration
enum SMSProvider {
  PRIMETEL
  MTN_CYPRUS
}

enum SMSStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  EXPIRED
}

model CyprusSMSLog {
  id              String      @id @default(cuid())

  // Message details
  phoneNumber     String      // Cyprus format: +357XXXXXXXX
  message         String
  provider        SMSProvider

  // Delivery tracking
  status          SMSStatus   @default(PENDING)
  providerRef     String?     // Provider's message reference
  deliveredAt     DateTime?

  // Cost tracking
  cost            Float?      // Cost in EUR (typically €0.024)

  // Context
  reservationId   String?     // Related reservation if applicable
  guestId         String?     // Related guest if applicable
  sentBy          String?     // User who sent the SMS

  // Error handling
  errorCode       String?
  errorMessage    String?

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("cyprus_sms_logs")
}

// Cyprus localization settings
model CyprusLocalization {
  id              String      @id @default(cuid())

  // Language preferences
  primaryLanguage String      @default("en") // en, el, he, ru
  supportedLanguages String[] @default(["en", "el"])

  // Regional settings
  timezone        String      @default("Asia/Nicosia")
  dateFormat      String      @default("DD/MM/YYYY")
  timeFormat      String      @default("24h")
  currency        String      @default("EUR")

  // Payment preferences
  jccEnabled      Boolean     @default(false)
  supportedCurrencies String[] @default(["EUR"])

  // Communication preferences
  smsProvider     SMSProvider @default(PRIMETEL)
  smsEnabled      Boolean     @default(true)

  // Compliance settings
  vatReportingEnabled Boolean @default(true)
  policeReportingEnabled Boolean @default(true)

  // Property-specific settings
  propertyId      String?     // Null for global settings
  property        Property?   @relation(fields: [propertyId], references: [id])

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("cyprus_localization")
}

